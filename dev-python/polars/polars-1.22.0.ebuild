# This ebuild was auto-generated by homeassistant script, and the script was not able to find a better candidate.
EAPI=8

DISTUTILS_USE_PEP517=setuptools
PYTHON_COMPAT=( python3_{12,13{,t}} )
GENERATED_IUSE="adbc all async calamine cloudpickle connectorx database deltalake excel fsspec gpu graph iceberg numpy openpyxl pandas plot pyarrow pydantic sqlalchemy style xlsx2csv xlsxwriter"
IUSE="${GENERATED_IUSE}"

inherit distutils-r1 pypi

DESCRIPTION=""
HOMEPAGE="
  https://pypi.org/project/polars/"

LICENSE=""
SLOT="0"
KEYWORDS="amd64 arm64"

REQUIRES_DIST="
	adbc-driver-manager[dbapi]; extra == 'adbc'
	adbc-driver-sqlite[dbapi]; extra == 'adbc'
	altair>=5.4.0; extra == 'plot'
	cloudpickle; extra == 'cloudpickle'
	connectorx>=0.3.2; extra == 'connectorx'
	cudf-polars-cu12; extra == 'gpu'
	deltalake>=0.19.0; extra == 'deltalake'
	fastexcel>=0.9; extra == 'calamine'
	fsspec; extra == 'fsspec'
	gevent; extra == 'async'
	great-tables>=0.8.0; extra == 'style'
	matplotlib; extra == 'graph'
	numpy>=1.16.0; extra == 'numpy'
	openpyxl>=3.0.0; extra == 'openpyxl'
	pandas; extra == 'pandas'
	polars[adbc,connectorx,sqlalchemy]; extra == 'database'
	polars[async,cloudpickle,database,deltalake,excel,fsspec,graph,iceberg,numpy,pandas,plot,pyarrow,pydantic,style,timezone]; extra == 'all'
	polars[calamine,openpyxl,xlsx2csv,xlsxwriter]; extra == 'excel'
	polars[pandas]; extra == 'sqlalchemy'
	polars[pyarrow]; extra == 'pandas'
	pyarrow>=7.0.0; extra == 'pyarrow'
	pydantic; extra == 'pydantic'
	pyiceberg>=0.5.0; extra == 'iceberg'
	sqlalchemy; extra == 'sqlalchemy'
	tzdata; platform_system == 'Windows' and extra == 'timezone'
	xlsx2csv>=0.8.0; extra == 'xlsx2csv'
	xlsxwriter; extra == 'xlsxwriter'
"
GENERATED_RDEPEND="${RDEPEND}
	adbc? ( dev-python/adbc-driver-manager[dbapi,${PYTHON_USEDEP}] )
	adbc? ( dev-python/adbc-driver-sqlite[dbapi,${PYTHON_USEDEP}] )
	plot? ( >=dev-python/altair-5.4.0[${PYTHON_USEDEP}] )
	cloudpickle? ( dev-python/cloudpickle[${PYTHON_USEDEP}] )
	connectorx? ( >=dev-python/connectorx-0.3.2[${PYTHON_USEDEP}] )
	gpu? ( dev-python/cudf-polars-cu12[${PYTHON_USEDEP}] )
	deltalake? ( >=dev-python/deltalake-0.19.0[${PYTHON_USEDEP}] )
	calamine? ( >=dev-python/fastexcel-0.9[${PYTHON_USEDEP}] )
	fsspec? ( dev-python/fsspec[${PYTHON_USEDEP}] )
	async? ( dev-python/gevent[${PYTHON_USEDEP}] )
	style? ( >=dev-python/great-tables-0.8.0[${PYTHON_USEDEP}] )
	graph? ( dev-python/matplotlib[${PYTHON_USEDEP}] )
	numpy? ( >=dev-python/numpy-1.16.0[${PYTHON_USEDEP}] )
	openpyxl? ( >=dev-python/openpyxl-3.0.0[${PYTHON_USEDEP}] )
	pandas? ( dev-python/pandas[${PYTHON_USEDEP}] )
	all? ( dev-python/polars[async,cloudpickle,database,deltalake,excel,fsspec,graph,iceberg,numpy,pandas,plot,pyarrow,pydantic,style,timezone,${PYTHON_USEDEP}] )
	database? ( dev-python/polars[adbc,connectorx,sqlalchemy,${PYTHON_USEDEP}] )
	excel? ( dev-python/polars[calamine,openpyxl,xlsx2csv,xlsxwriter,${PYTHON_USEDEP}] )
	pandas? ( dev-python/polars[pyarrow,${PYTHON_USEDEP}] )
	sqlalchemy? ( dev-python/polars[pandas,${PYTHON_USEDEP}] )
	pyarrow? ( >=dev-python/pyarrow-7.0.0[${PYTHON_USEDEP}] )
	pydantic? ( dev-python/pydantic[${PYTHON_USEDEP}] )
	iceberg? ( >=dev-python/pyiceberg-0.5.0[${PYTHON_USEDEP}] )
	sqlalchemy? ( dev-python/sqlalchemy[${PYTHON_USEDEP}] )
	xlsx2csv? ( >=dev-python/xlsx2csv-0.8.0[${PYTHON_USEDEP}] )
	xlsxwriter? ( dev-python/xlsxwriter[${PYTHON_USEDEP}] )
"
RDEPEND="${GENERATED_RDEPEND}"

distutils_enable_tests pytest
